import streamlit as st
import pandas as pd
import numpy as np
from mplsoccer import Pitch
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib.colors as mcolors
from matplotlib import patheffects
from matplotlib.patches import Patch # Pour la l√©gende
from fpdf import FPDF
from tempfile import NamedTemporaryFile
import os
# --- Configuration de la page ---
st.set_page_config(page_title="Visualisation Foot", layout="wide")
st.title("Outil de Visualisation de Donn√©es Footballistiques")
# --- Upload CSV ---
st.sidebar.header("üìÅ Donn√©es")
uploaded_file = st.sidebar.file_uploader("Importer un fichier CSV", type=["csv"])
if not uploaded_file:
    st.warning("Veuillez importer un fichier CSV.")
    st.stop()
# --- Lecture du CSV avec feedback ---
with st.spinner("Lecture du fichier CSV..."):
    try:
        content = uploaded_file.read().decode('utf-8')
        sep = ';' if ';' in content.splitlines()[0] else ','
        uploaded_file.seek(0)
        df = pd.read_csv(uploaded_file, sep=sep)
    except Exception as e:
        st.error(f"Erreur lors de la lecture du CSV : {e}")
        st.stop()
# --- Aper√ßu des donn√©es ---
with st.expander("üîç Aper√ßu des donn√©es import√©es"):
    st.write("**Structure du DataFrame :**")
    st.write(df.dtypes)
    st.write("**Premi√®res lignes :**")
    st.dataframe(df.head())
# --- Nettoyage des colonnes n√©cessaires ---
required_columns = ['Team', 'Player', 'Event', 'X', 'Y', 'X2', 'Y2']
missing_columns = [col for col in required_columns if col not in df.columns]
if missing_columns:
    st.error(f"Colonnes manquantes dans le fichier CSV : {missing_columns}")
    st.stop()
df = df[required_columns]
df = df.dropna(subset=['Player', 'Event', 'X', 'Y']).reset_index(drop=True)
# --- Conversion des colonnes num√©riques ---
for col in ['X', 'Y', 'X2', 'Y2']:
    df[col] = pd.to_numeric(df[col], errors='coerce')
# --- Conversion des coordonn√©es si en 0‚Äì100 ---
# Ajout d'une v√©rification plus robuste
max_coord = df[['X', 'Y', 'X2', 'Y2']].max().max()
if pd.notna(max_coord) and max_coord <= 105 and max_coord > 50: # Hypoth√®se raisonnable
    st.info("Coordonn√©es d√©tect√©es en format 0-100. Conversion vers 0-120/0-80.")
    df['X'] *= 1.2
    df['X2'] *= 1.2
    df['Y'] *= 0.8
    df['Y2'] *= 0.8
# --- Nettoyage des textes ---
df['Team'] = df['Team'].fillna('AS Monaco').astype(str).str.strip().str.title()
df['Player'] = df['Player'].fillna('').astype(str).str.strip().str.title()
df['Event'] = (
    df['Event']
    .fillna('')
    .astype(str)
    .str.strip()
    .str.lower()
    .str.replace(r'\s+', ' ', regex=True)
    .str.title()
)
# --- FILTRES ---
st.sidebar.header("üîç Filtres Principaux")
event_options = sorted(df['Event'].dropna().unique())
player_options = sorted(df['Player'].dropna().unique())
team_options = sorted(df['Team'].dropna().unique())
selected_teams = st.sidebar.multiselect("√âquipes", team_options, default=team_options)
selected_players = st.sidebar.multiselect("Joueurs", player_options, default=player_options)
displayed_events = st.sidebar.multiselect(
    "√âv√©nements √† afficher",
    options=event_options,
    default=["Pass"] if "Pass" in event_options else event_options[:1]
)
# --- Classification par zones de terrain (AVANT les filtres pour avoir les options de filtre) ---
def classify_zone(x, y):
    """
    Classifie un point (x, y) dans une zone du terrain.
    Les zones sont mutuellement exclusives.
    Ordre de priorit√©: Surface R√©p. > Haute > M√©diane > Basse
    INVERS√â : Basse et Haute sont interchang√©es
    """
    # 1. Surface de R√©paration (la plus sp√©cifique, prioritaire)
    if 102 < x <= 120 and 18 < y < 62:
        return 'Surface R√©p.'
    # 2. Haute (approche de la surface adverse, mais en dehors de la Surface R√©p.)
    # INVERS√â : Haute est maintenant pr√®s du fond de son propre camp (ancienne Basse)
    elif 0 <= x < 36:
        return 'Haute'
    # 3. M√©diane
    elif 36 <= x <= 90:
        return 'M√©diane'
    # 4. Basse (fond de son propre camp)
    # INVERS√â : Basse est maintenant pr√®s de la surface adverse (ancienne Haute)
    elif 90 < x <= 102:
        return 'Basse'
    else:
        # Pour les cas limites ou erreurs, on met par d√©faut dans une zone centrale
        return 'M√©diane' # ou 'Inconnue'
# Ajouter temporairement la colonne Zone pour obtenir les options de filtre
df['Zone_temp'] = df.apply(lambda row: classify_zone(row['X'], row['Y']), axis=1)
zone_options = sorted(df['Zone_temp'].dropna().unique())
del df['Zone_temp'] # Supprimer la colonne temporaire
# Filtre par zone dans la sidebar (avant les options de visualisation)
selected_zones = st.sidebar.multiselect(
    "Zones du Terrain",
    options=zone_options,
    default=zone_options,
    help="Filtrer les √©v√©nements par zone o√π ils ont eu lieu."
)
# --- Options de Visualisation ---
st.sidebar.header("‚öôÔ∏è Options d'Affichage")
show_legend = st.sidebar.checkbox("Afficher la l√©gende des √©v√©nements", value=True)
# Nouvelle option pour la palette de couleurs avec des noms lisibles
# Dictionnaire de correspondance Nom Affich√© -> Nom Matplotlib
PALETTE_OPTIONS = {
    'Par d√©faut (Couleurs sp√©cifiques + Tab20)': 'Par d√©faut',
    'Tab20 (Couleurs vives)': 'tab20',
    'Tab20b (Couleurs vives, variante B)': 'tab20b',
    'Set1 (Couleurs distinctes)': 'Set1',
    'Set2 (Couleurs pastel)': 'Set2',
    'Viridis (D√©grad√© violet-jaune)': 'viridis',
    'Plasma (D√©grad√© violet-rose-jaune)': 'plasma',
    'Coolwarm (D√©grad√© bleu-rouge)': 'coolwarm',
    'Pastel1 (Couleurs pastel vives)': 'Pastel1',
    'Dark2 (Couleurs sombres)': 'Dark2'
}
# R√©cup√©rer la liste des noms affich√©s pour le selectbox
display_names_list = list(PALETTE_OPTIONS.keys())
# Options avanc√©es dans un expander
with st.sidebar.expander("‚ûï Options Avanc√©es"):
    st.markdown("**Fl√®ches (Passes, etc.)**")
    arrow_width = st.slider("√âpaisseur des fl√®ches", min_value=0.5, max_value=5.0, value=2.0, step=0.5, key="arrow_width")
    arrow_head_scale = st.slider("Taille de la t√™te des fl√®ches", min_value=1.0, max_value=10.0, value=2.0, step=0.5, key="arrow_head_scale")
    arrow_alpha = st.slider("Opacit√© des fl√®ches", min_value=0.1, max_value=1.0, value=0.8, step=0.1, key="arrow_alpha")
    st.markdown("**Points (Tirs, Tacles, etc.)**")
    point_size = st.slider("Taille des points", min_value=20, max_value=200, value=80, step=10, key="point_size")
    scatter_alpha = st.slider("Opacit√© des points", min_value=0.1, max_value=1.0, value=0.8, step=0.1, key="scatter_alpha")
    st.markdown("**Heatmap**")
    heatmap_alpha = st.slider("Opacit√© de la heatmap", min_value=0.1, max_value=1.0, value=0.85, step=0.05, key="heatmap_alpha")
    # NOUVEAUT√âS : Options avanc√©es pour la heatmap (TYPE DE STATISTIQUE SUPPRIM√â)
    st.markdown("**Options Avanc√©es Heatmap**")
    # Option pour masquer/afficher les labels
    show_heatmap_labels = st.checkbox("Afficher les labels sur la heatmap", value=True, key="show_heatmap_labels")
    # NOUVEAUT√â : Option pour masquer les labels 0%
    hide_zero_percent_labels = st.checkbox(
        "Masquer les labels 0%",
        value=True, # Activ√© par d√©faut
        help="Masquer les pourcentages √† 0% sur la heatmap pour une meilleure lisibilit√©."
    )
    st.markdown("**Palette de Couleurs**")
    selected_palette_display_name = st.selectbox(
        "Palette de couleurs",
        options=display_names_list,
        index=0,
        help="Choisissez une palette de couleurs pour les types d'√©v√©nements."
    )
    # Obtenir le nom technique de la palette √† utiliser
    color_palette_name = PALETTE_OPTIONS[selected_palette_display_name]
# --- Filtres globaux ---
df_filtered = df[
    df['Team'].isin(selected_teams) &
    df['Player'].isin(selected_players) &
    df['Event'].isin(displayed_events)
]
# Appliquer le filtre par zone
df_filtered = df_filtered[
    df_filtered.apply(lambda row: classify_zone(row['X'], row['Y']), axis=1).isin(selected_zones)
]
df_event = df_filtered
# --- V√©rification apr√®s filtrage ---
if df_event.empty:
    st.warning("Aucun √©v√©nement ne correspond aux filtres s√©lectionn√©s.")
    st.stop()
# --- Ajout de la colonne Zone d√©finitive ---
df_event['Zone'] = df_event.apply(lambda row: classify_zone(row['X'], row['Y']), axis=1)
# --- TABLEAU QUANTITATIF PAR TYPE ET ZONE ---
st.header("Quantit√© d'√âv√©nements par Type et Zone")
zone_counts = df_event.groupby(['Event', 'Zone']).size().unstack(fill_value=0)
zone_counts['Total'] = zone_counts.sum(axis=1)
zone_counts = zone_counts.sort_values(by='Total', ascending=False)
st.dataframe(zone_counts)
# --- TABLEAU DES POURCENTAGES PAR ZONE ---
st.subheader("Pourcentage d'√âv√©nements par Zone")
zone_total = df_event['Zone'].value_counts().reset_index()
zone_total.columns = ['Zone', 'Total']
total_events = zone_total['Total'].sum()
zone_total['Pourcentage'] = (zone_total['Total'] / total_events * 100).round(1)
# Affichage du tableau avec mise en couleur
st.dataframe(
    zone_total.style.background_gradient(cmap='Reds', subset=['Pourcentage']).format({"Pourcentage": "{:.1f}%"})
)
# Visualisation sur terrain avec r√©partition en zones
st.markdown("---")
st.header("Visualisations sur Terrain - Analyse par Zones")
# --- Param√®tres communs pour les deux terrains ---
common_pitch_params = {
    'pitch_color': 'white',
    'line_color': 'black',
    'linewidth': 1,
    'line_zorder': 2
}
fig_size = (8, 5.5) # Taille uniforme et l√©g√®rement ajust√©e
# D√©finition des zones pour la visualisation
# INVERS√â : Les rectangles correspondent √† la logique de classification interchang√©e
zones_rects = {
    'Haute': (0, 0, 36, 80),      # Ancienne Basse
    'M√©diane': (36, 0, 54, 80),   # 90-36=54
    'Basse': (90, 0, 12, 80),     # Ancienne Haute (102-90=12)
    'Surface R√©p.': (102, 18, 18, 44) # 120-102=18, 62-18=44
}
zone_colors = {
    'Haute': '#87CEEB',          # Bleu clair
    'M√©diane': '#98FB98',        # Vert p√¢le
    'Basse': '#FFD700',          # Or
    'Surface R√©p.': '#FF6347'     # Rouge tomate
}
col_a, col_b = st.columns(2)
# --- Terrain avec pourcentages ---
with col_a:
    pitch_zone = Pitch(**common_pitch_params)
    fig_zone, ax_zone = pitch_zone.draw(figsize=fig_size)
    fig_zone.set_facecolor('white') # D√©finir la couleur de fond de la figure
    zone_percents = df_event['Zone'].value_counts(normalize=True).to_dict()
    for zone, (x, y, w, h) in zones_rects.items():
        percent = zone_percents.get(zone, 0)
        rect = plt.Rectangle((x, y), w, h, linewidth=1.5, edgecolor='black', facecolor=zone_colors.get(zone, '#DDDDDD'), alpha=0.7)
        ax_zone.add_patch(rect)
        # Ajustement de la taille du texte pour une meilleure lisibilit√©
        # Centrer le texte dans le rectangle
        ax_zone.text(x + w/2, y + h/2, f"{zone}\n{percent*100:.1f}%", ha='center', va='center', fontsize=8, weight='bold')
    ax_zone.set_title("R√©partition en Pourcentages", fontsize=12, weight='bold', pad=10) # pad pour l'espacement
    st.pyplot(fig_zone)
# --- Terrain avec nombre d'√©v√©nements ---
with col_b:
    pitch_count = Pitch(**common_pitch_params) # Utilisation des m√™mes param√®tres
    fig_count, ax_count = pitch_count.draw(figsize=fig_size)
    fig_count.set_facecolor('white') # D√©finir la couleur de fond de la figure
    zone_counts_dict = df_event['Zone'].value_counts().to_dict()
    for zone, (x, y, w, h) in zones_rects.items():
        count = zone_counts_dict.get(zone, 0)
        rect = plt.Rectangle((x, y), w, h, linewidth=1.5, edgecolor='black', facecolor=zone_colors.get(zone, '#DDDDDD'), alpha=0.7)
        ax_count.add_patch(rect)
        # Ajustement de la taille du texte pour une meilleure lisibilit√© et coh√©rence
        # Centrer le texte dans le rectangle
        ax_count.text(x + w/2, y + h/2, f"{zone}\n{count} evt", ha='center', va='center', fontsize=8, weight='bold')
    ax_count.set_title("Nombre d'√âv√©nements", fontsize=12, weight='bold', pad=10) # pad pour l'espacement
    st.pyplot(fig_count)
# --- VISUALISATION TERRAIN ---
st.markdown("---")
st.subheader("Visualisations sur Terrain")
# G√©n√©rer le dictionnaire de couleurs en fonction du choix de l'utilisateur
def get_event_colors(event_list, palette_name, base_colors_dict):
    if palette_name == 'Par d√©faut':
        # Utiliser les couleurs de base + une palette pour les autres
        cmap_for_others = cm.get_cmap('tab20', max(1, len(event_list)))
        generated_colors = {event: mcolors.to_hex(cmap_for_others(i)) for i, event in enumerate([e for e in event_list if e not in base_colors_dict])}
        return {**base_colors_dict, **generated_colors}
    else:
        # Utiliser la palette s√©lectionn√©e pour tous les √©v√©nements
        try:
            cmap_selected = cm.get_cmap(palette_name, max(1, len(event_list)))
            return {event: mcolors.to_hex(cmap_selected(i)) for i, event in enumerate(event_list)}
        except ValueError:
            # En cas d'erreur (palette non trouv√©e), retomber sur 'tab20'
            st.warning(f"Palette '{palette_name}' non trouv√©e. Utilisation de 'tab20'.")
            cmap_fallback = cm.get_cmap('tab20', max(1, len(event_list)))
            return {event: mcolors.to_hex(cmap_fallback(i)) for i, event in enumerate(event_list)}
# D√©finir les couleurs de base
base_colors = {
    'Shot': '#FF4B4B', 'Pass': '#6C9AC3', 'Dribble': '#FFA500',
    'Cross': '#92c952', 'Tackle': '#A52A2A', 'Interception': '#FFD700',
    'Clearance': '#00CED1'
}
# G√©n√©rer le dictionnaire final des couleurs
# Utilise color_palette_name obtenu depuis le selectbox
event_colors = get_event_colors(event_options, color_palette_name, base_colors)
col1, col2 = st.columns(2)
with col1:
    with st.spinner("G√©n√©ration de la visualisation des √©v√©nements..."):
        pitch = Pitch(pitch_color='white', line_color='black', linewidth=1)
        fig1, ax1 = pitch.draw(figsize=(10, 6))
        legend_elements = [] # Pour stocker les √©l√©ments de l√©gende
        for event_type in displayed_events:
            event_data = df_event[df_event['Event'] == event_type]
            color = event_colors.get(event_type, '#333333')
            has_xy2 = event_data[['X2', 'Y2']].notna().all(axis=1)
            # Utiliser les valeurs personnalis√©es pour les fl√®ches
            if has_xy2.any():
                pitch.arrows(
                    event_data[has_xy2]['X'], event_data[has_xy2]['Y'],
                    event_data[has_xy2]['X2'], event_data[has_xy2]['Y2'],
                    color=color, width=arrow_width, headwidth=3 * arrow_head_scale, headlength=2 * arrow_head_scale,
                    alpha=arrow_alpha, ax=ax1
                )
            # Utiliser les valeurs personnalis√©es pour les points
            if (~has_xy2).any():
                pitch.scatter(
                    event_data[~has_xy2]['X'], event_data[~has_xy2]['Y'],
                    ax=ax1, fc=color, ec='black', lw=0.5, s=point_size, alpha=scatter_alpha
                )
            if show_legend:
                 legend_elements.append(Patch(facecolor=color, label=event_type))
        ax1.set_title("Visualisation des √âv√©nements", fontsize=12, weight='bold')
        fig1.set_facecolor('white')
        # Ajuster la mise en page AVANT d'ajouter la l√©gende pour √©viter la compression
        if show_legend and legend_elements:
            # Ajuster la taille de la figure pour accommoder la l√©gende
            fig1.set_size_inches(12, 6)  # √âlargir la figure
            ax1.legend(handles=legend_elements, loc='center left', bbox_to_anchor=(1.02, 0.5), borderaxespad=0.)
            # Ajuster les marges pour que le terrain reste √† la m√™me taille
            plt.subplots_adjust(right=0.82)  # Laisser de la place √† droite pour la l√©gende
        else:
            plt.tight_layout()
        st.pyplot(fig1)
with col2:
    with st.spinner("G√©n√©ration de la heatmap..."):
        pitch = Pitch(pitch_type='statsbomb', pitch_color='white', line_color='black', line_zorder=2)
        fig2, ax2 = pitch.draw(figsize=(10, 6))
        fig2.set_facecolor('white')
        df_filtered_hm = df_event if len(displayed_events) != 1 else df_event[df_event['Event'] == displayed_events[0]]
        if not df_filtered_hm.empty:
            # Suppression de heatmap_statistic, utilisation directe de 'count'
            bin_statistic = pitch.bin_statistic(
                df_filtered_hm['X'], df_filtered_hm['Y'], statistic='count', bins=(6, 5), normalize=True
            )
            pitch.heatmap(bin_statistic, ax=ax2, cmap='Reds', edgecolor='white', alpha=heatmap_alpha)
            
            # >>>>> SOLUTION RADICALE : Utiliser pitch.label_heatmap <<<<<
            # Remplacer la boucle personnalis√©e probl√©matique par l'appel standard
            if show_heatmap_labels:
                # Configurer les options d'affichage des labels
                # Masquer les 0% si demand√©
                if hide_zero_percent_labels:
                    # Cr√©er un masque pour les valeurs √† 0
                    labels = bin_statistic['statistic']
                    labels = np.where(labels == 0, np.nan, labels)
                    # Passer le masque √† label_heatmap
                    pitch.label_heatmap(bin_statistic, ax=ax2, str_format='{:.0%}', 
                                        fontsize=12, ha='center', va='center', 
                                        exclude_zeros=True, # Cette option masque les 0 et les NaN
                                        color='black')
                else:
                    # Afficher tous les labels
                    pitch.label_heatmap(bin_statistic, ax=ax2, str_format='{:.0%}', 
                                        fontsize=12, ha='center', va='center', 
                                        color='black')
                    
                # Appliquer les effets de contour si n√©cessaire
                # Note: label_heatmap ne permet pas directement d'ajouter path_effects.
                # On peut le faire manuellement apr√®s si n√©cessaire, mais cela complique le code.
                # Pour simplifier, on laisse comme √ßa. Si vous voulez les contours, 
                # il faudra revenir √† une boucle personnalis√©e mais avec une approche diff√©rente.
                
        ax2.set_title("Heatmap des √âv√©nements", fontsize=12, weight='bold')
        st.pyplot(fig2)
st.markdown("---")
# --- CARTES COMBIN√âES PAR TYPE D'√âV√âNEMENT ---
if not df_event.empty:
    with st.expander("üìä Carte combin√©e par type d'√©v√©nement", expanded=True):
        st.subheader("Carte combin√©e par type d'√©v√©nement")
        grouped = [displayed_events[i:i + 3] for i in range(0, len(displayed_events), 3)]
        combined_images = []
        for group in grouped:
            row = st.container().columns(len(group))
            for i, event_type in enumerate(group):
                df_type = df_event[df_event['Event'] == event_type]
                if df_type.empty:
                    row[i].info(f"Aucun √©v√©nement pour {event_type}")
                    continue
                color = event_colors.get(event_type, '#333333')
                pitch = Pitch(pitch_color='white', line_color='black', line_zorder=2)
                fig, ax = pitch.draw(figsize=(6, 4))
                arrows_data = df_type[df_type[['X2', 'Y2']].notna().all(axis=1)]
                if not arrows_data.empty:
                    # Utiliser les valeurs personnalis√©es pour les fl√®ches
                    pitch.arrows(
                        arrows_data['X'], arrows_data['Y'],
                        arrows_data['X2'], arrows_data['Y2'],
                        ax=ax, zorder=10, color=color, alpha=arrow_alpha, width=arrow_width,
                        headwidth=3 * arrow_head_scale, headlength=2 * arrow_head_scale
                    )
                points_data = df_type[df_type[['X2', 'Y2']].isna().any(axis=1)]
                if not points_data.empty:
                     # Utiliser les valeurs personnalis√©es pour les points
                    pitch.scatter(
                        points_data['X'], points_data['Y'], ax=ax,
                        fc=color, marker='o', s=point_size, ec='black', lw=1,
                        alpha=scatter_alpha, zorder=5
                    )
                # Suppression de heatmap_statistic, utilisation directe de 'count'
                bin_stat = pitch.bin_statistic(df_type['X'], df_type['Y'], bins=(6, 5), normalize=True)
                event_cmaps = ['Reds', 'Blues', 'Greens', 'Purples', 'Oranges', 'Greys', 'YlGnBu', 'PuRd']
                cmap_name = event_cmaps[i % len(event_cmaps)]
                pitch.heatmap(bin_stat, ax=ax, cmap=cmap_name, edgecolor='white', alpha=heatmap_alpha)
                
                # >>>>> SOLUTION RADICALE : Utiliser pitch.label_heatmap <<<<<
                # Remplacer la boucle personnalis√©e probl√©matique par l'appel standard
                if show_heatmap_labels:
                    # Configurer les options d'affichage des labels
                    # Masquer les 0% si demand√©
                    if hide_zero_percent_labels:
                        # Cr√©er un masque pour les valeurs √† 0
                        labels = bin_stat['statistic']
                        labels = np.where(labels == 0, np.nan, labels)
                        # Passer le masque √† label_heatmap
                        pitch.label_heatmap(bin_stat, ax=ax, str_format='{:.0%}', 
                                            fontsize=10, ha='center', va='center', 
                                            exclude_zeros=True, # Cette option masque les 0 et les NaN
                                            color='black')
                    else:
                        # Afficher tous les labels
                        pitch.label_heatmap(bin_stat, ax=ax, str_format='{:.0%}', 
                                            fontsize=10, ha='center', va='center', 
                                            color='black')
                                            
                ax.set_title(event_type, color='black', fontsize=12, weight='bold')
                fig.set_facecolor('white')
                row[i].pyplot(fig)
                
                # Sauvegarder l'image pour le PDF
                with NamedTemporaryFile(delete=False, suffix=".png") as tmpfile:
                    fig.savefig(tmpfile.name, bbox_inches='tight', dpi=150)
                    combined_images.append((event_type, tmpfile.name))
                plt.close(fig)  # Fermer la figure pour lib√©rer la m√©moire
# --- T√âL√âCHARGEMENT DU RAPPORT PDF FINAL ---
# Placer le bouton dans la sidebar, en bas
st.sidebar.markdown("---")
if st.sidebar.button("üì• T√©l√©charger le rapport PDF complet"):
    with st.spinner("G√©n√©ration du rapport PDF..."):
        # Format A3 paysage (420mm x 297mm) pour plus d'espace
        pdf = FPDF(orientation='L', unit='mm', format='A3')
        pdf.set_auto_page_break(auto=False)
        
        def add_footer():
            pdf.set_y(-10)
            pdf.set_font("Arial", 'I', 8)
            pdf.cell(0, 5, f"Page {pdf.page_no()}", 0, 0, 'C')

        # Pr√©parer toutes les images avant de cr√©er le PDF
        temp_files = []
        try:
            # --- Page 1: Page de garde ---
            pdf.add_page()
            pdf.set_font("Arial", 'B', 24)
            pdf.ln(40)
            pdf.cell(0, 15, "Rapport de Visualisation Footballistique", ln=True, align='C')
            pdf.ln(10)
            pdf.set_font("Arial", '', 14)
            pdf.cell(0, 10, f"√âquipes : {', '.join(selected_teams)}", ln=True, align='C')
            pdf.ln(5)
            pdf.cell(0, 10, f"Joueurs : {', '.join(selected_players)}", ln=True, align='C')
            pdf.ln(5)
            pdf.cell(0, 10, f"Zones : {', '.join(selected_zones)}", ln=True, align='C')
            pdf.ln(5)
            pdf.cell(0, 10, f"√âv√©nements analys√©s : {', '.join(displayed_events)}", ln=True, align='C')
            pdf.ln(5)
            pdf.set_font("Arial", 'I', 10)
            pdf.cell(0, 10, f"Nombre total d'√©v√©nements : {len(df_event)}", ln=True, align='C')
            add_footer()

            # --- Page 2: Tableaux et terrains zonaux ---
            pdf.add_page()
            pdf.set_font("Arial", 'B', 18)
            pdf.cell(0, 12, "Analyse par Zones du Terrain", ln=True, align='C')
            pdf.ln(8)
            
            # Tableau quantitatif (partie sup√©rieure gauche)
            pdf.set_xy(20, 30)  # Position fixe pour √©viter les chevauchements
            pdf.set_font("Arial", 'B', 12)
            pdf.cell(180, 8, "√âv√©nements par Type et Zone", ln=True)
            pdf.ln(3)
            
            # En-t√™tes du tableau
            col_names = ['Event'] + [col for col in zone_counts.columns if col != 'Total'] + ['Total']
            col_widths = [35] + [25] * (len(col_names) - 2) + [25]
            pdf.set_fill_color(220, 220, 220)
            for i, name in enumerate(col_names):
                pdf.cell(col_widths[i], 8, str(name), border=1, fill=True, align='C')
            pdf.ln()
            
            # Donn√©es du tableau
            pdf.set_font("Arial", size=10)
            pdf.set_fill_color(255, 255, 255)
            for idx, row in zone_counts.iterrows():
                pdf.cell(col_widths[0], 8, str(idx)[:25], border=1)  # Limiter la longueur
                for i, col in enumerate([col for col in zone_counts.columns if col != 'Total']):
                    pdf.cell(col_widths[i+1], 8, str(int(row[col])), border=1, align='C')
                pdf.cell(col_widths[-1], 8, str(int(row['Total'])), border=1, align='C')
                pdf.ln()
                
            # Tableau des pourcentages (partie sup√©rieure droite avec position fixe)
            pdf.set_xy(250, 30)  # Position fixe √† droite
            pdf.set_font("Arial", 'B', 12)
            pdf.cell(125, 8, "R√©partition par Zone (%)", ln=True)
            pdf.ln(3)
            
            pdf.set_xy(250, 46)  # Position fixe pour les en-t√™tes
            pdf.set_font("Arial", 'B', 10)
            pdf.set_fill_color(220, 220, 220)
            pdf.cell(50, 8, "Zone", border=1, fill=True, align='C')
            pdf.cell(35, 8, "Total", border=1, fill=True, align='C')
            pdf.cell(40, 8, "Pourcentage", border=1, fill=True, align='C')
            pdf.ln()
            
            pdf.set_font("Arial", size=10)
            pdf.set_fill_color(255, 255, 255)
            current_y = 54  # Y fixe pour commencer les donn√©es
            for _, row in zone_total.iterrows():
                pdf.set_xy(250, current_y)
                pdf.cell(50, 8, str(row['Zone']), border=1)
                pdf.cell(35, 8, str(row['Total']), border=1, align='C')
                pdf.cell(40, 8, f"{row['Pourcentage']:.1f}%", border=1, align='C')
                current_y += 8

            # Sauvegarder les terrains zonaux avec une meilleure r√©solution
            with NamedTemporaryFile(delete=False, suffix=".png") as tmp_zone_pct:
                fig_zone.savefig(tmp_zone_pct.name, bbox_inches='tight', dpi=200, facecolor='white')
                temp_files.append(tmp_zone_pct.name)
            with NamedTemporaryFile(delete=False, suffix=".png") as tmp_zone_count:
                fig_count.savefig(tmp_zone_count.name, bbox_inches='tight', dpi=200, facecolor='white')
                temp_files.append(tmp_zone_count.name)

            # Placer les terrains dans la partie inf√©rieure (plus grands)
            terrain_y = 140
            pdf.image(tmp_zone_pct.name, x=50, y=terrain_y, w=140, h=90)
            pdf.image(tmp_zone_count.name, x=220, y=terrain_y, w=140, h=90)
            
            # L√©gendes sous les terrains
            pdf.set_xy(50, terrain_y + 95)
            pdf.set_font("Arial", 'B', 11)
            pdf.cell(140, 6, "R√©partition en Pourcentages", align='C')
            pdf.set_xy(220, terrain_y + 95)
            pdf.cell(140, 6, "Nombre d'√âv√©nements", align='C')
            add_footer()

            # --- Page 3: Visualisations des terrains ---
            pdf.add_page()
            pdf.set_font("Arial", 'B', 18)
            pdf.cell(0, 12, "Visualisations sur Terrain", ln=True, align='C')
            pdf.ln(10)
            
            # Sauvegarder les visualisations avec une meilleure r√©solution
            with NamedTemporaryFile(delete=False, suffix=".png") as tmp_fig1:
                fig1.savefig(tmp_fig1.name, bbox_inches='tight', dpi=200, facecolor='white')
                temp_files.append(tmp_fig1.name)
            with NamedTemporaryFile(delete=False, suffix=".png") as tmp_fig2:
                fig2.savefig(tmp_fig2.name, bbox_inches='tight', dpi=200, facecolor='white')
                temp_files.append(tmp_fig2.name)

            # Placer les visualisations c√¥te √† c√¥te avec plus d'espace
            terrain_width = 180
            terrain_height = 120
            pdf.image(tmp_fig1.name, x=30, y=40, w=terrain_width, h=terrain_height)
            pdf.image(tmp_fig2.name, x=230, y=40, w=terrain_width, h=terrain_height)
            
            # L√©gendes sous les terrains
            pdf.set_xy(30, 165)
            pdf.set_font("Arial", 'B', 12)
            pdf.cell(terrain_width, 8, "√âv√©nements sur le terrain", align='C')
            pdf.set_xy(230, 165)
            pdf.cell(terrain_width, 8, "Heatmap des √©v√©nements", align='C')
            add_footer()

            # --- Page 4: Cartes combin√©es ---
            if combined_images:
                pdf.add_page()
                pdf.set_font("Arial", 'B', 18)
                pdf.cell(0, 12, "Cartes Combin√©es par Type d'√âv√©nement", ln=True, align='C')
                pdf.ln(10)
                
                # Organiser les images en grille adapt√©e au format A3
                img_width = 120
                img_height = 80
                margin_x = 30
                margin_y = 40
                cols = 3
                spacing_x = 15
                spacing_y = 20
                
                for i, (event_type, img_path) in enumerate(combined_images):
                    if i >= 6:  # Limite √† 6 images par page (2 lignes de 3)
                        break
                    col = i % cols
                    row = i // cols
                    x = margin_x + col * (img_width + spacing_x)
                    y = margin_y + row * (img_height + spacing_y)
                    pdf.image(img_path, x=x, y=y, w=img_width, h=img_height)
                    
                    # Titre sous l'image
                    pdf.set_xy(x, y + img_height + 3)
                    pdf.set_font("Arial", 'B', 11)
                    pdf.cell(img_width, 6, event_type, align='C')
                add_footer()

            # G√©n√©rer et t√©l√©charger le PDF
            with NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_pdf:
                pdf.output(tmp_pdf.name)
                with open(tmp_pdf.name, "rb") as file:
                    pdf_data = file.read()
                    st.download_button(
                        "üìÑ T√©l√©charger le PDF final du rapport",
                        data=pdf_data,
                        file_name="rapport_foot_A3.pdf",
                        mime="application/pdf"
                    )
                # Nettoyer le fichier PDF temporaire
                os.unlink(tmp_pdf.name)
        finally:
            # Nettoyer tous les fichiers temporaires
            for temp_file in temp_files:
                try:
                    os.unlink(temp_file)
                except:
                    pass
            for _, img_path in combined_images:
                try:
                    os.unlink(img_path)
                except:
                    pass
